//=============================================================================
//
// 弾の処理 [bullet.cpp]
// Author : 竹内亘
//
//=============================================================================
#include "bullet.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"
#include "debugproc.h"

//=============================================================================
// 静的メンバ変数
//=============================================================================
LPDIRECT3DTEXTURE9 CBullet::m_pTexture = NULL;

//=============================================================================
// コンストラクタ
//=============================================================================
CBullet::CBullet()
{

}
//=============================================================================
// デストラクタ
//=============================================================================
CBullet::~CBullet()
{

}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CBullet::Init(D3DXVECTOR3 pos, D3DXVECTOR3 move)
{
	CBillBoard::Init(pos);

	// 情報の初期化
	m_pos = pos;
	m_move = move;
	m_nLife = 40;

	return S_OK;
}
//=============================================================================
// 終了処理
//=============================================================================
void CBullet::Uninit(void)
{
	CBillBoard::Uninit();
}
//=============================================================================
// 更新処理
//=============================================================================
void CBullet::Update(void)
{
	CDebugProc::Print(1, "弾の位置 : X %.1f, Y %.1f, Z %.1f\n", m_pos.x, m_pos.y, m_pos.z);

	bool bUse = false;

	m_pos += m_move;

	CBillBoard::SetPosition(m_pos, m_move);

	if (m_pos.x < -200 || m_pos.z < -200 || m_pos.x > 200 || m_pos.z > 200)
	{
		bUse = true;
	}

	if (bUse == true)
	{// 弾の破棄
		Uninit();
	}
}
//=============================================================================
// 描画処理
//=============================================================================
void CBullet::Draw(void)
{
	CBillBoard::Draw();
}
//=============================================================================
// 弾の生成
//=============================================================================
CBullet * CBullet::Create(D3DXVECTOR3 pos, D3DXVECTOR3 move)
{
	CBullet *pBullet = NULL;

	if (pBullet == NULL)
	{
		pBullet = new CBullet;

		if (pBullet != NULL)
		{
			pBullet->Init(pos, move);
			pBullet->BindTexture(m_pTexture);
		}
	}
	return pBullet;
}
//=============================================================================
// テクスチャの読み込み
//=============================================================================
HRESULT CBullet::Load(void)
{
	CManager manager;	// インスタンス

	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = manager.GetRenderer()->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice, BULEET_TEXTURE_000, &m_pTexture);

	return S_OK;
}
//=============================================================================
// テクスチャの破棄
//=============================================================================
void CBullet::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}