//=============================================================================
//
// ライフ処理 [life.cpp]
// Author : 竹内亘
//
//=============================================================================
#include "life.h"
#include "polygon.h"
#include "renderer.h"
#include "manager.h"
#include "player.h"

//=============================================================================
// 静的メンバ変数
//=============================================================================
CPolygon * CLife::m_apPolygon[MAX_LIFE] = {};

//=============================================================================
// コンストラクタ
//=============================================================================
CLife::CLife()
{
	m_nLife = 0;
}
//=============================================================================
// デストラクタ
//=============================================================================
CLife::~CLife()
{
}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CLife::Init(D3DXVECTOR3 pos)
{
	for (int nCount = 0; nCount < MAX_LIFE; nCount++)
	{
		m_apPolygon[nCount] = new CPolygon;

		m_apPolygon[nCount]->Init(D3DXVECTOR3(pos.x + (LIFE_INTERVAL_SIZE * nCount), pos.y, pos.z));
	}

	m_nLife = MAX_LIFE;

	return S_OK;
}
//=============================================================================
// 終了処理
//=============================================================================
void CLife::Uninit(void)
{
	for (int nCount = 0; nCount < MAX_LIFE; nCount++)
	{
		m_apPolygon[nCount]->Uninit();

		// メモリの開放
		delete m_apPolygon[nCount];

		// NULLを入れる
		m_apPolygon[nCount] = {};
	}

	// オブジェクト(自分自身)の破棄
	Release();
}
//=============================================================================
// 更新処理
//=============================================================================
void CLife::Update(void)
{
	for (int nCount = 0; nCount < MAX_LIFE; nCount++)
	{
		m_apPolygon[nCount]->Update();
	}
}
//=============================================================================
// 描画処理
//=============================================================================
void CLife::Draw(void)
{
	for (int nCount = 0; nCount < MAX_LIFE; nCount++)
	{
		m_apPolygon[nCount]->Draw();
	}
}
//=============================================================================
// ライフの加算減算
//=============================================================================
void CLife::AddLife(int nValue)
{
	m_nLife += nValue;

	if (m_nLife == 2)
	{
		m_apPolygon[2]->Uninit();
	}
}
//=============================================================================
// スコアの生成
//=============================================================================
CLife * CLife::Create(D3DXVECTOR3 pos)
{
	CLife *pLife = NULL;

	if (pLife == NULL)
	{
		pLife = new CLife;

		if (pLife != NULL)
		{
			pLife->Init(pos);
		}
	}
	return pLife;
}
